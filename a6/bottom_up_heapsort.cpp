#include<iostream>
#include<algorithm>
using namespace std;

void maxheapify(int arr[],int n,int i){

		int right=i*2+1;
		int left=2*i+2;
		int largest=i;
		if(left<n && arr[left]>arr[largest]){
				largest=left;
		}

		if(right<n && arr[right]>arr[largest]){
				largest=right;

		}	
		if(i!=largest){

				swap(arr[i],arr[largest]);
				maxheapify(arr,n,largest);

		}
}
void bottom_up_heapsort(int arr[],int b,int e){

		while( b < e){
				int l = 2*b + 1;
				int r = 2*b + 2;

				if (r < e && arr[r] > arr[l] && arr[r] > arr[b]){
						swap(arr[b], arr[r]);
						b = r;
				}

				else if(l < e && arr[l] > arr[b]){
						swap(arr[b], arr[l]); 
						b = l;
				}

				else{
						break;
				}    
				//fixing step
				if(b!=0){
						int parent=(b-1)/2;
						while(parent>=0 && arr[b]>arr[parent]){
								swap(arr[parent],arr[b]);
								b=parent;
								parent=(b-1)/2;

						}
				} 
		}
		/* while(b < e){      identik sben
		   int r=2*b+1;
		   int l=2*b+2;
		// int max_res=max(arr[r],arr[l]);
		if(r<e && arr[r]>arr[l] & arr[r]>arr[b]){
		swap(arr[b],arr[r]);
		b=r;
		}
		else if(l<e && arr[l]>arr[b]){
		swap(arr[b,arr[l]);
		b=l;
		}
		else{
		break;
		}

		//fixing step
		if(b!=0){
		int parent=(b-1)/2;
		while(parent>=0 && arr[b]>arr[parent]){
		swap(arr[parent],arr[b]);
		b=parent;
		parent=(b-1)/2;

		}
		}  */
}
void heapsort(int arr[],int n){
		for(int i=n/2;i>=0;i--){
				maxheapify(arr,n,i);
		}int i=n;
		while (i>0)
		{
				swap(arr[i],arr[0]);
				bottom_up_heapsort(arr,0,i);
				i--;

		}

}
int main(){
		int arr[]={1000, 999, 998, 997, 996, 995, 994, 993, 992, 991, 990, 989, 988, 987, 986, 985, 984,
         983, 982, 981, 980, 979, 978, 977, 976, 975, 974, 973, 972, 971, 970, 969, 968, 967, 966, 965, 
         964, 963, 962, 961, 960, 959, 958, 957, 956, 955, 954, 953, 952, 951, 950, 949, 948, 947, 946, 
         945, 944, 943, 942, 941, 940, 939, 938, 937, 936, 935, 934, 933, 932, 931, 930, 929, 928, 927, 
         926, 925, 924, 923, 922, 921, 920, 919, 918, 917, 916, 915, 914, 913, 912, 911, 910, 909, 908, 
         907, 906, 905, 904, 903, 902, 901, 900, 899, 898, 897, 896, 895, 894, 893, 892, 891, 890, 889, 
         888, 887, 886, 885, 884, 883, 882, 881, 880, 879, 878, 877, 876, 875, 874, 873, 872, 871, 870,
          869, 868, 867, 866, 865, 864, 863, 862, 861, 860, 859, 858, 857, 856, 855, 854, 853, 852, 851,
           850, 849, 848, 847, 846, 845, 844, 843, 842, 841, 840, 839, 838, 837, 836, 835, 834, 833, 832,
            831, 830, 829, 828, 827, 826, 825, 824, 823, 822, 821, 820, 819, 818, 817, 816, 815, 814, 813,
             812, 811, 810, 809, 808, 807, 806, 805, 804, 803, 802, 801, 800, 799, 798, 797, 796, 795, 794,
              793, 792, 791, 790, 789, 788, 787, 786, 785, 784, 783, 782, 781, 780, 779, 778, 777, 776, 775, 
              774, 773, 772, 771, 770, 769, 768, 767, 766, 765, 764, 763, 762, 761, 760, 759, 758, 757, 756, 
              755, 754, 753, 752,0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 
              21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 
              44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 
              67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 
              90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 
              110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127,
               128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139};
		int n=sizeof(arr)/sizeof(int);
		heapsort(arr,n-1);
		for(int i=0;i<n;i++){
				cout<<arr[i]<<" ";
		}
		cout<<endl;

}

